"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5162],{1657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Maps/ActionNodes","title":"Action Nodes","description":"Action Nodes are special interactions that players with an IsEvil role can trigger. They are billboard in 3D space and can be triggered within a certain distance, optionally for a cost. Most often, they are used to create traitor doors or traitor traps.","source":"@site/docs/Maps/ActionNodes.md","sourceDirName":"Maps","slug":"/Maps/ActionNodes","permalink":"/TT3-Docs/Maps/ActionNodes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Scripts","permalink":"/TT3-Docs/Maps/Scripts"},"next":{"title":"MapObject","permalink":"/TT3-Docs/Maps/MapObject"}}');var a=n(4848),r=n(8453);const i={sidebar_position:10},c="Action Nodes",s={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"action-nodes",children:"Action Nodes"})}),"\n",(0,a.jsxs)(t.p,{children:["Action Nodes are special interactions that players with an ",(0,a.jsx)(t.code,{children:"IsEvil"})," role can trigger. They are billboard in 3D space and can be triggered within a certain distance, optionally for a cost. Most often, they are used to create traitor doors or traitor traps."]}),"\n",(0,a.jsxs)(t.p,{children:["To create an action node, create a ",(0,a.jsx)(t.code,{children:"Part"})," with a ",(0,a.jsx)(t.code,{children:"Script"})," child. The script should have the following effect:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'--!strict\n\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal TweenService = game:GetService("TweenService")\nlocal Types = require(ReplicatedStorage.API.Types)\nlocal ActionNodeType = require(ReplicatedStorage.Shared.Actions.ActionNodeType)\nlocal ActionNode = require(ReplicatedStorage.Shared.MapPrefabs.ActionNode)\n\nlocal TITLE = "Traitor Room (Don\'t press with innocents around!)" -- Shown when hovering\nlocal COST = 0 -- The credit cost of the action\nlocal COOLDOWN = 3 -- The cooldown of the action, in seconds\nlocal RADIUS = 100 -- The radius within which the action can be triggered\n\nlocal door = script.Parent\nlocal tweenInfo = TweenInfo.new(\n\t1,\n\tEnum.EasingStyle.Linear,\n\tEnum.EasingDirection.Out,\n\t0,\n\tfalse,\n\t0\n)\nlocal doorOpen = TweenService:Create(door, tweenInfo, {CFrame = door.CFrame * CFrame.new(0, -8.5, 0)})\nlocal doorClose = TweenService:Create(door, tweenInfo, {CFrame = door.CFrame})\n\n-- This is the function that is called when the action is triggered\nlocal function action(participant: Types.Participant): ()\n\tdoorOpen:Play()\n\tdoorOpen.Completed:Wait()\n\ttask.wait(1)\n\tdoorClose:Play()\nend\n\n-- This specifies the parameters of the action, as defined above.\nlocal params: ActionNodeType.ActionNodeParams = {\n\tAdornee = script.Parent,\n\tTitle = TITLE,\n\tCost = COST,\n\tCooldown = COOLDOWN,\n\tRadius = RADIUS,\n\tAction = action\n}\n\n-- This sets up the action node at the params.Adornee part.\nActionNode(params)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(6540);const a={},r=o.createContext(a);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);