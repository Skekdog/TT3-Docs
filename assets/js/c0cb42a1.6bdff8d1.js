"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{3452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"Maps/The MapScript","title":"The MapScript","description":"The MapScript serves as the root of your map. It defines the properties of your map, such as the name, creators, icons, and custom features.","source":"@site/docs/Maps/The MapScript.md","sourceDirName":"Maps","slug":"/Maps/The MapScript","permalink":"/TT3-Docs/Maps/The MapScript","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Structure","permalink":"/TT3-Docs/Maps/Structure"},"next":{"title":"Props","permalink":"/TT3-Docs/Maps/Props"}}');var o=n(4848),a=n(8453);const i={sidebar_position:3},s="The MapScript",c={},p=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"the-mapscript",children:"The MapScript"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"MapScript"})," serves as the root of your map. It defines the properties of your map, such as the name, creators, icons, and custom features."]}),"\n",(0,o.jsx)(t.p,{children:"MapScripts should look like the following. If you know how to script, feel free to get creative! Otherwise, just follow the template below."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-lua",children:'--!strict\n-- Note: this line is a comment, as indicated by the double dashes.\n\nlocal Types = require(game:GetService("ReplicatedStorage").Shared.RoundRule.Types)\n\nlocal map: Types.MapDefinition = {\n\tName = "replace this with your map name",\n\tDescription = "describe your map. at present the description is never used, but you must still have it here.",\n\tAuthors = "@username, @somebodyElse, etc.",\n\n\tMapIcons = {\n\t\t["16:9"] = "rbxassetid://assetId", -- Despite the 16:9, your map icon can be any size.\n\t},\n\n\tGravity = 80, -- default is 80. Maps with lower gravity will also have lower fall damage.\n\n\tLightingSettings = {\n\t\tClockTime = 14,\n\t\tOutdoorAmbient = Color3.fromRGB(255, 255, 255),\n\t\t-- You can continue adding other Lighting settings here. These are applied to the Lighting service that you can see next to Workspace.\n\t\t-- NOTE! Due to Roblox limitations, you can\'t change settings like LightingStyle or PrioritizeLightingQuality.\n\t},\n\n\tWaterSettings = {\n\t\tWaterColor = Color3.fromRGB(0, 0, 0),\n\t\tWaterWaveSpeed = 10,\n\t\t-- You can continue adding other Water settings here. These are applied to the Terrain instance that you can find in Workspace.\n\t},\n\n\tTerrainColors = {\n\t\tBrick = Color3.fromRGB(123, 123, 64),\n\t\tAsphalt = Color3.fromRGB(123, 23, 64),\n\t\t-- You can continue adding other colors here. These are applied to the Terrain instance, under the MaterialColors property.\n\t},\n\n\tInteractableDefinitions = {\n\t\t-- This defines how Interactables on your map will interact. We will cover Interactables later in the guide.\n\t},\n\n\tAvailableItems = {\n\t\t-- Your map can also define custom items. These will be covered in the Gamemodes guide.\n\t},\n\n\tAvailableAmmo = {\n\t\t-- Like above\n\t},\n\n\tMap = script, -- IMPORTANT! Your map will not work without this!\n}\n\nreturn map -- Also very important!\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const o={},a=r.createContext(o);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);