"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2443],{794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Classes/Interactable","title":"Interactable","description":"The interactable class represents a loaded interactable.","source":"@site/docs/Classes/Interactable.md","sourceDirName":"Classes","slug":"/Classes/Interactable","permalink":"/TT3-Docs/Classes/Interactable","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3.5,"frontMatter":{"sidebar_position":3.5},"sidebar":"tutorialSidebar","previous":{"title":"Prop","permalink":"/TT3-Docs/Classes/Prop"},"next":{"title":"Map","permalink":"/TT3-Docs/Classes/Map"}}');var s=n(4848),l=n(8453);const i={sidebar_position:3.5},a="Interactable",d={},c=[{value:"Properties",id:"properties",level:2},{value:"Kind",id:"kind",level:3},{value:"Definition",id:"definition",level:3},{value:"Model",id:"model",level:3},{value:"Round",id:"round",level:3},{value:"Extras",id:"extras",level:3},{value:"HintTextClient",id:"hinttextclient",level:3},{value:"Methods",id:"methods",level:2},{value:"GetHealth",id:"gethealth",level:3},{value:"Returns",id:"returns",level:4},{value:"SetHealth",id:"sethealth",level:3},{value:"Parameters",id:"parameters",level:4},{value:"TryTakeDamage",id:"trytakedamage",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"interactable",children:"Interactable"})}),"\n",(0,s.jsx)(t.p,{children:"The interactable class represents a loaded interactable."}),"\n",(0,s.jsxs)(t.p,{children:["See also: ",(0,s.jsx)(t.a,{href:"/TT3-Docs/Maps/Interactables",children:"Maps.Interactables"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"kind",children:"Kind"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'Type: "Interactable"'})}),"\n",(0,s.jsx)(t.p,{children:'Always set to "Interactable". Used to differentiate between classes.'}),"\n",(0,s.jsx)(t.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: InteractableDefinition"})}),"\n",(0,s.jsx)(t.p,{children:"The definition of the interactable."}),"\n",(0,s.jsx)(t.h3,{id:"model",children:"Model"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: MapObject"})}),"\n",(0,s.jsx)(t.p,{children:"The interactable model."}),"\n",(0,s.jsx)(t.h3,{id:"round",children:"Round"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: Round?"})}),"\n",(0,s.jsx)(t.p,{children:"A reference to the current round. May be nil."}),"\n",(0,s.jsx)(t.h3,{id:"extras",children:"Extras"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: Extras"})}),"\n",(0,s.jsx)(t.p,{children:"Additional data for the specific interactable instance."}),"\n",(0,s.jsx)(t.h3,{id:"hinttextclient",children:"HintTextClient"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: string?"})}),"\n",(0,s.jsx)(t.p,{children:"Hint to display to the player when they look at the interactable."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"gethealth",children:"GetHealth"}),"\n",(0,s.jsx)(t.p,{children:"Returns the current health of the interactable. If the interactable is non-destructible, returns nil."}),"\n",(0,s.jsx)(t.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: number?"})}),"\n",(0,s.jsx)(t.h3,{id:"sethealth",children:"SetHealth"}),"\n",(0,s.jsx)(t.p,{children:"Sets the current health of the interactable."}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"health"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"number"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The health."})]})})]}),"\n",(0,s.jsx)(t.h3,{id:"trytakedamage",children:"TryTakeDamage"}),"\n",(0,s.jsx)(t.p,{children:"Deals damage to the interactable, if possible. Returns true if the damage was applied, false otherwise."}),"\n",(0,s.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"params"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"DamageParams"})}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The damage parameters."})]})})]}),"\n",(0,s.jsx)(t.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Type: boolean"})})]})}function o(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},l=r.createContext(s);function i(e){const t=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);