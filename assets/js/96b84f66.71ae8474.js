"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[274],{8453:(e,a,r)=>{r.d(a,{R:()=>t,x:()=>i});var n=r(6540);const o={},s=n.createContext(o);function t(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),n.createElement(s.Provider,{value:a},e.children)}},8510:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Maps/Props","title":"Props","description":"Most maps will want to have props - props are thing that players can grab with the Magneto Stick, that can (or cannot) be destroyed, and that can (or cannot) be moved around. Props can have special behaviour when taking damage, or when destroyed.","source":"@site/docs/Maps/Props.md","sourceDirName":"Maps","slug":"/Maps/Props","permalink":"/TT3-Docs/Maps/Props","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"The MapScript","permalink":"/TT3-Docs/Maps/The MapScript"},"next":{"title":"Items","permalink":"/TT3-Docs/Maps/Items"}}');var o=r(4848),s=r(8453);const t={sidebar_position:4},i="Props",l={},c=[{value:"Making a Prop",id:"making-a-prop",level:2},{value:"Special Behaviour",id:"special-behaviour",level:2},{value:"Prefabs",id:"prefabs",level:3},{value:"Examples",id:"examples",level:3}];function d(e){const a={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"props",children:"Props"})}),"\n",(0,o.jsx)(a.p,{children:"Most maps will want to have props - props are thing that players can grab with the Magneto Stick, that can (or cannot) be destroyed, and that can (or cannot) be moved around. Props can have special behaviour when taking damage, or when destroyed."}),"\n",(0,o.jsx)(a.h2,{id:"making-a-prop",children:"Making a Prop"}),"\n",(0,o.jsxs)(a.p,{children:["Props can take two forms: a single ",(0,o.jsx)(a.code,{children:"BasePart"}),", or a ",(0,o.jsx)(a.code,{children:"Model"}),". In either case, you must add the ",(0,o.jsx)(a.code,{children:"Prop"})," tag to the ",(0,o.jsx)(a.code,{children:"BasePart"})," or ",(0,o.jsx)(a.code,{children:"Model"})," to make it a prop. Props must be in the ",(0,o.jsx)(a.code,{children:"Dynamic"})," map folder, but you can place them in any sub-folder within ",(0,o.jsx)(a.code,{children:"Dynamic"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"Done!"}),"\n",(0,o.jsxs)(a.p,{children:["If you want to make your prop breakable, you should add an attribute named ",(0,o.jsx)(a.code,{children:"Health"}),", and set it to a number."]}),"\n",(0,o.jsx)(a.h2,{id:"special-behaviour",children:"Special Behaviour"}),"\n",(0,o.jsxs)(a.p,{children:["If your prop is breakable, you can have special behaviour for when it takes damage and for when it is destroyed. To do this, add a ",(0,o.jsx)(a.code,{children:"OnDamage"})," and/or ",(0,o.jsx)(a.code,{children:"OnBreak"})," ",(0,o.jsx)(a.code,{children:"ModuleScript"})," to your prop."]}),"\n",(0,o.jsx)(a.p,{children:"These modules should return a function which will run when the relevant event occurs. The function should have the following signature:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-lua",children:"OnBreak: function(prop: Types.Prop, params: Types.DamageParams): ()\nOnDamage: function(prop: Types.Prop, params: Types.DamageParams): boolean?\n"})}),"\n",(0,o.jsxs)(a.p,{children:["The returned boolean for ",(0,o.jsx)(a.code,{children:"OnDamage"})," determines whether the prop should actually take damage. The parameter types are covered in the classes section of the docs."]}),"\n",(0,o.jsx)(a.h3,{id:"prefabs",children:"Prefabs"}),"\n",(0,o.jsx)(a.p,{children:"There are a number of prefabs available for prop behaviour. You can use these by setting your OnBreak / OnDamage module to the following code:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-lua",children:'return require(game:GetService("ReplicatedStorage").Shared.MapPrefabs.PrefabName)\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Prefabs:",(0,o.jsx)("br",{}),"\nCurrently only one prefab exists."]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"Window"})," - Shatter the window when it is destroyed."]}),"\n"]}),"\n",(0,o.jsxs)(a.admonition,{type:"note",children:[(0,o.jsx)(a.p,{children:"If you are coming from TT2, most map prefabs from there should also be available here. You should still use the TT2 path for the module require, so:"}),(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-lua",children:'return require(game:GetService("ReplicatedStorage").Assets.MapPrefabs.PrefabName)\n'})})]}),"\n",(0,o.jsx)(a.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-lua",children:'--!strict\n-- Prop.OnBreak\n-- When this prop is broken, it will make the attacker a free kill if they are not evil (a Traitor).\n-- An example usage of this is for a traitor tester.\n\nreturn function(prop: Types.Prop, params: Types.DamageParams): ()\n\tif params.Attacker and not params.Attacker:IsEvil() then\n\t\tparams.Attacker:SetFreeKill("destroyed the prop")\n\tend\nend\n'})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);